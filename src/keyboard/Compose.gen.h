/***********************************************************************/
/******************* This file is generated by *************************/
/******************* the Compose Generator *****************************/
/***********************************************************************/

#ifndef __COMPOSE_H__
#define __COMPOSE_H__

#include "NeoIncludes.h"
#include <assert.h>

/*
 * The tree is static, therefore no methods for removing/adding elements,
 * to not make life too complicated, this file is generated by a script.
 * 
 * The implementation with bit fields and unions is not the most pretty one
 * but the most memory efficient.
 * 
 * Payload is either pointing to next node or contains unicode symbol.
 * indication what is inside is given by the isLeaf flag cast to uint16_t
 * in Initialization only to trick the compiler, as only first element of the
 * union can be initialized. 
*/

struct LayeredKey {
	uint8_t layer;
	uint8_t key;
};

struct Node {
	struct {
		uint8_t isLastElement : 1;
		uint8_t isLeaf : 1;
		uint8_t layer : 6;
		uint8_t keycode : 8;
	} layeredKey;
	union {
		uint16_t unicode;
		Node* nodes;
	} payload;
};


class Compose
{
	private:
	Node* currentNode;

	const static Node root[] PROGMEM;
	const static Node NODE_140707421760944[] PROGMEM;
	const static Node NODE_140707421636224[] PROGMEM;
	const static Node NODE_140707421761024[] PROGMEM;
	const static Node NODE_140707421872192[] PROGMEM;
	const static Node NODE_140707421872432[] PROGMEM;
	const static Node NODE_140707421872592[] PROGMEM;
	const static Node NODE_140707421555344[] PROGMEM;
	const static Node NODE_140707421760864[] PROGMEM;
	const static Node NODE_140707421593904[] PROGMEM;
	const static Node NODE_140707421637584[] PROGMEM;
	const static Node NODE_140707421761264[] PROGMEM;
	const static Node NODE_140707421816448[] PROGMEM;
	const static Node NODE_140707421779984[] PROGMEM;
	const static Node NODE_140707421780304[] PROGMEM;
	const static Node NODE_140707421780144[] PROGMEM;
	const static Node NODE_140707421554704[] PROGMEM;
	const static Node NODE_140707421569968[] PROGMEM;
	const static Node NODE_140707421572048[] PROGMEM;
	const static Node NODE_140707421573008[] PROGMEM;
	const static Node NODE_140707421596704[] PROGMEM;
	const static Node NODE_140707421635424[] PROGMEM;
	const static Node NODE_140707421636464[] PROGMEM;
	const static Node NODE_140707421132656[] PROGMEM;
	const static Node NODE_140707421876368[] PROGMEM;
	const static Node NODE_140707421555504[] PROGMEM;
	const static Node NODE_140707421572768[] PROGMEM;
	const static Node NODE_140707421635344[] PROGMEM;
	const static Node NODE_140707421636864[] PROGMEM;
	const static Node NODE_140707421132896[] PROGMEM;
	const static Node NODE_140707421876608[] PROGMEM;
	const static Node NODE_140707421876848[] PROGMEM;
	const static Node NODE_140707421876928[] PROGMEM;
	const static Node NODE_140707421878528[] PROGMEM;
	const static Node NODE_140707421879888[] PROGMEM;
	const static Node NODE_140707421465072[] PROGMEM;
	const static Node NODE_140707421464992[] PROGMEM;
	const static Node NODE_140707421465952[] PROGMEM;
	const static Node NODE_140707421465872[] PROGMEM;
	const static Node NODE_140707421466192[] PROGMEM;
	const static Node NODE_140707421876768[] PROGMEM;
	const static Node NODE_140707421615104[] PROGMEM;
	const static Node NODE_140707421615424[] PROGMEM;
	const static Node NODE_140707421877088[] PROGMEM;
	const static Node NODE_140707421877248[] PROGMEM;
	const static Node NODE_140707421635984[] PROGMEM;
	const static Node NODE_140707421637344[] PROGMEM;
	const static Node NODE_140707421133456[] PROGMEM;
	const static Node NODE_140707421877408[] PROGMEM;
	const static Node NODE_140707421862704[] PROGMEM;
	const static Node NODE_140707421779664[] PROGMEM;
	const static Node NODE_140707421779744[] PROGMEM;
	const static Node NODE_140707421779824[] PROGMEM;
	const static Node NODE_140707421554624[] PROGMEM;
	const static Node NODE_140707421556304[] PROGMEM;
	const static Node NODE_140707421571008[] PROGMEM;
	const static Node NODE_140707421595744[] PROGMEM;
	const static Node NODE_140707421877808[] PROGMEM;
	const static Node NODE_140707421597024[] PROGMEM;
	const static Node NODE_140707421616144[] PROGMEM;
	const static Node NODE_140707421877968[] PROGMEM;
	const static Node NODE_140707421570368[] PROGMEM;
	const static Node NODE_140707421878288[] PROGMEM;
	const static Node NODE_140707421878208[] PROGMEM;
	const static Node NODE_140707421635824[] PROGMEM;
	const static Node NODE_140707421637104[] PROGMEM;
	const static Node NODE_140707421133216[] PROGMEM;
	const static Node NODE_140707421878128[] PROGMEM;
	const static Node NODE_140707421878608[] PROGMEM;
	const static Node NODE_140707421878768[] PROGMEM;
	const static Node NODE_140707421133696[] PROGMEM;
	const static Node NODE_140707421879248[] PROGMEM;
	const static Node NODE_140707421879328[] PROGMEM;
	const static Node NODE_140707421450128[] PROGMEM;
	const static Node NODE_140707421879088[] PROGMEM;
	const static Node NODE_140707421860544[] PROGMEM;
	const static Node NODE_140707421860784[] PROGMEM;
	const static Node NODE_140707421815648[] PROGMEM;
	const static Node NODE_140707421817568[] PROGMEM;
	const static Node NODE_140707421817728[] PROGMEM;
	const static Node NODE_140707421817808[] PROGMEM;
	const static Node NODE_140707421818048[] PROGMEM;
	const static Node NODE_140707421778304[] PROGMEM;
	const static Node NODE_140707421778464[] PROGMEM;
	const static Node NODE_140707421778544[] PROGMEM;
	const static Node NODE_140707421779344[] PROGMEM;
	const static Node NODE_140707421779264[] PROGMEM;
	const static Node NODE_140707421780464[] PROGMEM;
	const static Node NODE_140707421780704[] PROGMEM;
	const static Node NODE_140707421781024[] PROGMEM;
	const static Node NODE_140707421781264[] PROGMEM;
	const static Node NODE_140707421781664[] PROGMEM;
	const static Node NODE_140707421781904[] PROGMEM;
	const static Node NODE_140707421462672[] PROGMEM;
	const static Node NODE_140707421872992[] PROGMEM;
	const static Node NODE_140707421873232[] PROGMEM;
	const static Node NODE_140707421874352[] PROGMEM;
	const static Node NODE_140707421873472[] PROGMEM;
	const static Node NODE_140707421874592[] PROGMEM;
	const static Node NODE_140707421874912[] PROGMEM;
	const static Node NODE_140707421875072[] PROGMEM;
	const static Node NODE_140707421874992[] PROGMEM;
	const static Node NODE_140707421875232[] PROGMEM;
	const static Node NODE_140707421875392[] PROGMEM;
	const static Node NODE_140707421875552[] PROGMEM;
	const static Node NODE_140707421875952[] PROGMEM;
	const static Node NODE_140707421421632[] PROGMEM;
	const static Node NODE_140707421421872[] PROGMEM;
	const static Node NODE_140707421421792[] PROGMEM;
	const static Node NODE_140707421422832[] PROGMEM;
	const static Node NODE_140707421422992[] PROGMEM;
	const static Node NODE_140707421424272[] PROGMEM;
	const static Node NODE_140707421424352[] PROGMEM;
	const static Node NODE_140707421424672[] PROGMEM;
	const static Node NODE_140707421446368[] PROGMEM;
	const static Node NODE_140707421446608[] PROGMEM;
	const static Node NODE_140707421446768[] PROGMEM;
	const static Node NODE_140707421446688[] PROGMEM;
	const static Node NODE_140707421446928[] PROGMEM;
	const static Node NODE_140707421448048[] PROGMEM;
	const static Node NODE_140707421448368[] PROGMEM;
	const static Node NODE_140707421448448[] PROGMEM;
	const static Node NODE_140707421448208[] PROGMEM;
	const static Node NODE_140707421448608[] PROGMEM;
	const static Node NODE_140707421448768[] PROGMEM;
	const static Node NODE_140707421449088[] PROGMEM;
	const static Node NODE_140707421449168[] PROGMEM;
	const static Node NODE_140707421449568[] PROGMEM;
	const static Node NODE_140707421449648[] PROGMEM;
	const static Node NODE_140707421450048[] PROGMEM;
	const static Node NODE_140707421463072[] PROGMEM;
	const static Node NODE_140707421463152[] PROGMEM;
	const static Node NODE_140707421463312[] PROGMEM;

	const static LayeredKey aliases[][2];
	
	LayeredKey getAlias(uint8_t layer, uint8_t key);

	public:
	Compose() : currentNode(const_cast<Node*>(root)){
		//if this assertion fails, the struct in Node has to be reworked for the target architecture
		assert(sizeof(uint16_t) >= sizeof(Node*));
	}
	
	uint16_t transition(uint8_t layer, uint8_t key);
	void reset();
	
	


}; //Compose

#endif //__COMPOSE_H__